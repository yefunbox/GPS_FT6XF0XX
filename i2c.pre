
# 1 "i2c.c"

# 90 "C:\Program Files (x86)\HI-TECH Software\PICC\9.83\include\pic16f684.h"
volatile unsigned char INDF @ 0x000;



volatile unsigned char TMR0 @ 0x001;



volatile unsigned char PCL @ 0x002;



volatile unsigned char STATUS @ 0x003;

volatile bit CARRY @ ((unsigned)&STATUS*8)+0;
volatile bit DC @ ((unsigned)&STATUS*8)+1;
volatile bit ZERO @ ((unsigned)&STATUS*8)+2;
volatile bit nPD @ ((unsigned)&STATUS*8)+3;
volatile bit nTO @ ((unsigned)&STATUS*8)+4;
volatile bit RP @ ((unsigned)&STATUS*8)+5;

volatile bit C @ ((unsigned)&STATUS*8)+0;
volatile bit HC @ ((unsigned)&STATUS*8)+1;
volatile bit Z @ ((unsigned)&STATUS*8)+2;
volatile bit nPF @ ((unsigned)&STATUS*8)+3;
volatile bit nTF @ ((unsigned)&STATUS*8)+4;
volatile bit PAGE @ ((unsigned)&STATUS*8)+5;

volatile union {
struct {
unsigned CARRY : 1;
unsigned DC : 1;
unsigned ZERO : 1;
unsigned nPD : 1;
unsigned nTO : 1;
unsigned RP : 1;
};
struct {
unsigned C : 1;
unsigned HC : 1;
unsigned Z : 1;
unsigned nPF : 1;
unsigned nTF : 1;
unsigned PAGE : 1;
};
} STATUSbits @ 0x003;



volatile unsigned char FSR @ 0x004;



volatile unsigned char PORTA @ 0x005;

volatile bit RA0 @ ((unsigned)&PORTA*8)+0;
volatile bit RA1 @ ((unsigned)&PORTA*8)+1;
volatile bit RA2 @ ((unsigned)&PORTA*8)+2;
volatile bit RA3 @ ((unsigned)&PORTA*8)+3;
volatile bit RA4 @ ((unsigned)&PORTA*8)+4;
volatile bit RA5 @ ((unsigned)&PORTA*8)+5;

volatile bit PA0 @ ((unsigned)&PORTA*8)+0;
volatile bit PA1 @ ((unsigned)&PORTA*8)+1;
volatile bit PA2 @ ((unsigned)&PORTA*8)+2;
volatile bit PA3 @ ((unsigned)&PORTA*8)+3;
volatile bit PA4 @ ((unsigned)&PORTA*8)+4;
volatile bit PA5 @ ((unsigned)&PORTA*8)+5;

volatile union {
struct {
unsigned RA0 : 1;
unsigned RA1 : 1;
unsigned RA2 : 1;
unsigned RA3 : 1;
unsigned RA4 : 1;
unsigned RA5 : 1;
};
struct {
unsigned PA0 : 1;
unsigned PA1 : 1;
unsigned PA2 : 1;
unsigned PA3 : 1;
unsigned PA4 : 1;
unsigned PA5 : 1;
};
} PORTAbits @ 0x005;



volatile unsigned char PCLATH @ 0x00A;


volatile union {
struct {
unsigned PCLATH : 3;
};
} PCLATHbits @ 0x00A;



volatile unsigned char INTCON @ 0x00B;

volatile bit PAIF @ ((unsigned)&INTCON*8)+0;
volatile bit INTF @ ((unsigned)&INTCON*8)+1;
volatile bit T0IF @ ((unsigned)&INTCON*8)+2;
volatile bit PAIE @ ((unsigned)&INTCON*8)+3;
volatile bit INTE @ ((unsigned)&INTCON*8)+4;
volatile bit T0IE @ ((unsigned)&INTCON*8)+5;
volatile bit PEIE @ ((unsigned)&INTCON*8)+6;
volatile bit GIE @ ((unsigned)&INTCON*8)+7;

volatile union {
struct {
unsigned PAIF : 1;
unsigned INTF : 1;
unsigned T0IF : 1;
unsigned PAIE : 1;
unsigned INTE : 1;
unsigned T0IE : 1;
unsigned PEIE : 1;
unsigned GIE : 1;
};
} INTCONbits @ 0x00B;



volatile unsigned char PIR1 @ 0x00C;

volatile bit TMR2IF @ ((unsigned)&PIR1*8)+1;
volatile bit CKMEAIF @ ((unsigned)&PIR1*8)+6;
volatile bit EEIF @ ((unsigned)&PIR1*8)+7;

volatile union {
struct {
unsigned : 1;
unsigned TMR2IF : 1;
unsigned : 1;
unsigned : 1;
unsigned : 1;
unsigned : 1;
unsigned CKMEAIF : 1;
unsigned EEIF : 1;
};
} PIR1bits @ 0x00C;




volatile unsigned char TMR2 @ 0x011;



volatile unsigned char T2CON @ 0x012;

volatile bit T2CKPS0 @ ((unsigned)&T2CON*8)+0;
volatile bit T2CKPS1 @ ((unsigned)&T2CON*8)+1;
volatile bit TMR2ON @ ((unsigned)&T2CON*8)+2;
volatile bit TOUTPS0 @ ((unsigned)&T2CON*8)+3;
volatile bit TOUTPS1 @ ((unsigned)&T2CON*8)+4;
volatile bit TOUTPS2 @ ((unsigned)&T2CON*8)+5;
volatile bit TOUTPS3 @ ((unsigned)&T2CON*8)+6;

volatile union {
struct {
unsigned T2CKPS : 2;
unsigned TMR2ON : 1;
unsigned TOUTPS : 4;
};
struct {
unsigned T2CKPS0 : 1;
unsigned T2CKPS1 : 1;
unsigned : 1;
unsigned TOUTPS0 : 1;
unsigned TOUTPS1 : 1;
unsigned TOUTPS2 : 1;
unsigned TOUTPS3 : 1;
};
} T2CONbits @ 0x012;




volatile unsigned char WDTCON @ 0x018;

volatile bit SWDTEN @ ((unsigned)&WDTCON*8)+0;
volatile bit WDTPS0 @ ((unsigned)&WDTCON*8)+1;
volatile bit WDTPS1 @ ((unsigned)&WDTCON*8)+2;
volatile bit WDTPS2 @ ((unsigned)&WDTCON*8)+3;
volatile bit WDTPS3 @ ((unsigned)&WDTCON*8)+4;

volatile union {
struct {
unsigned SWDTEN : 1;
unsigned WDTPS : 4;
};
struct {
unsigned : 1;
unsigned WDTPS0 : 1;
unsigned WDTPS1 : 1;
unsigned WDTPS2 : 1;
unsigned WDTPS3 : 1;
};
} WDTCONbits @ 0x018;



volatile unsigned char MSCKCON @ 0x01B;

volatile bit CKCNTI @ ((unsigned)&MSCKCON*8)+1;
volatile bit CKMAVG @ ((unsigned)&MSCKCON*8)+2;
volatile bit SLVREN @ ((unsigned)&MSCKCON*8)+4;


volatile union {
struct {
unsigned : 1;
unsigned CKCNTI : 1;
unsigned CKMAVG : 1;
unsigned : 1;
unsigned SLVREN : 1;
};
} MSCKCONbits @ 0x01B;



volatile unsigned char SOSCPRL @ 0x01C;



volatile unsigned char SOSCPRH @ 0x01D;


volatile union {
struct {
unsigned SOSCPRH : 4;
};
} SOSCPRHbits @ 0x01D;

# 337
volatile unsigned char OPTION @ 0x081;

volatile bit PS0 @ ((unsigned)&OPTION*8)+0;
volatile bit PS1 @ ((unsigned)&OPTION*8)+1;
volatile bit PS2 @ ((unsigned)&OPTION*8)+2;
volatile bit PSA @ ((unsigned)&OPTION*8)+3;
volatile bit T0SE @ ((unsigned)&OPTION*8)+4;
volatile bit T0CS @ ((unsigned)&OPTION*8)+5;
volatile bit INTEDG @ ((unsigned)&OPTION*8)+6;
volatile bit nPAPU @ ((unsigned)&OPTION*8)+7;

volatile union {
struct {
unsigned PS : 3;
unsigned PSA : 1;
unsigned T0SE : 1;
unsigned T0CS : 1;
unsigned INTEDG : 1;
unsigned nPAPU : 1;
};
struct {
unsigned PS0 : 1;
unsigned PS1 : 1;
unsigned PS2 : 1;
};
} OPTIONbits @ 0x081;



volatile unsigned char TRISA @ 0x085;

volatile bit TRISA0 @ ((unsigned)&TRISA*8)+0;
volatile bit TRISA1 @ ((unsigned)&TRISA*8)+1;
volatile bit TRISA2 @ ((unsigned)&TRISA*8)+2;
volatile bit TRISA4 @ ((unsigned)&TRISA*8)+4;
volatile bit TRISA5 @ ((unsigned)&TRISA*8)+5;

volatile union {
struct {
unsigned TRISA0 : 1;
unsigned TRISA1 : 1;
unsigned TRISA2 : 1;
unsigned : 1;
unsigned TRISA4 : 1;
unsigned TRISA5 : 1;
};
} TRISAbits @ 0x085;




volatile unsigned char PIE1 @ 0x08C;

volatile bit TMR2IE @ ((unsigned)&PIE1*8)+1;
volatile bit CKMEAIE @ ((unsigned)&PIE1*8)+6;
volatile bit EEIE @ ((unsigned)&PIE1*8)+7;

volatile union {
struct {
unsigned : 1;
unsigned TMR2IE : 1;
unsigned : 4;
unsigned CKMEAIE : 1;
unsigned EEIE : 1;
};
} PIE1bits @ 0x08C;



volatile unsigned char PCON @ 0x08E;

volatile bit nBOR @ ((unsigned)&PCON*8)+0;
volatile bit nPOR @ ((unsigned)&PCON*8)+1;

volatile union {
struct {
unsigned nBOR : 1;
unsigned nPOR : 1;
};
} PCONbits @ 0x08E;



volatile unsigned char OSCCON @ 0x08F;

volatile bit LFIOFR @ ((unsigned)&OSCCON*8)+1;
volatile bit HFIOFR @ ((unsigned)&OSCCON*8)+2;
volatile bit IRCF0 @ ((unsigned)&OSCCON*8)+4;
volatile bit IRCF1 @ ((unsigned)&OSCCON*8)+5;
volatile bit IRCF2 @ ((unsigned)&OSCCON*8)+6;
volatile bit LFMOD @ ((unsigned)&OSCCON*8)+7;

volatile union {
struct {
unsigned : 1;
unsigned LFIOFR : 1;
unsigned HFIOFR : 1;
unsigned : 1;
unsigned IRCF : 3;
unsigned LFMOD : 1;
};
struct {
unsigned : 4;
unsigned IRCF0 : 1;
unsigned IRCF1 : 1;
unsigned IRCF2 : 1;
};
} OSCCONbits @ 0x08F;



volatile unsigned char PR2 @ 0x092;



volatile unsigned char WPUA @ 0x095;
volatile unsigned char WPU @ 0x095;

volatile bit WPUA0 @ ((unsigned)&WPUA*8)+0;
volatile bit WPUA1 @ ((unsigned)&WPUA*8)+1;
volatile bit WPUA2 @ ((unsigned)&WPUA*8)+2;
volatile bit WPUA4 @ ((unsigned)&WPUA*8)+4;
volatile bit WPUA5 @ ((unsigned)&WPUA*8)+5;

volatile bit WPU0 @ ((unsigned)&WPUA*8)+0;
volatile bit WPU1 @ ((unsigned)&WPUA*8)+1;
volatile bit WPU2 @ ((unsigned)&WPUA*8)+2;
volatile bit WPU4 @ ((unsigned)&WPUA*8)+4;
volatile bit WPU5 @ ((unsigned)&WPUA*8)+5;

volatile union {
struct {
unsigned WPUA0 : 1;
unsigned WPUA1 : 1;
unsigned WPUA2 : 1;
unsigned : 1;
unsigned WPUA4 : 1;
unsigned WPUA5 : 1;
};
struct {
unsigned WPU0 : 1;
unsigned WPU1 : 1;
unsigned WPU2 : 1;
unsigned : 1;
unsigned WPU4 : 1;
unsigned WPU5 : 1;
};
} WPUAbits @ 0x095;



volatile unsigned char IOCA @ 0x096;
volatile unsigned char IOC @ 0x096;

volatile bit IOCA0 @ ((unsigned)&IOCA*8)+0;
volatile bit IOCA1 @ ((unsigned)&IOCA*8)+1;
volatile bit IOCA2 @ ((unsigned)&IOCA*8)+2;
volatile bit IOCA3 @ ((unsigned)&IOCA*8)+3;
volatile bit IOCA4 @ ((unsigned)&IOCA*8)+4;
volatile bit IOCA5 @ ((unsigned)&IOCA*8)+5;

volatile bit IOC0 @ ((unsigned)&IOCA*8)+0;
volatile bit IOC1 @ ((unsigned)&IOCA*8)+1;
volatile bit IOC2 @ ((unsigned)&IOCA*8)+2;
volatile bit IOC3 @ ((unsigned)&IOCA*8)+3;
volatile bit IOC4 @ ((unsigned)&IOCA*8)+4;
volatile bit IOC5 @ ((unsigned)&IOCA*8)+5;

volatile union {
struct {
unsigned IOCA0 : 1;
unsigned IOCA1 : 1;
unsigned IOCA2 : 1;
unsigned IOCA3 : 1;
unsigned IOCA4 : 1;
unsigned IOCA5 : 1;
};
struct {
unsigned IOC0 : 1;
unsigned IOC1 : 1;
unsigned IOC2 : 1;
unsigned IOC3 : 1;
unsigned IOC4 : 1;
unsigned IOC5 : 1;
};
} IOCAbits @ 0x096;



volatile unsigned char EEDAT @ 0x09A;
volatile unsigned char EEDATA @ 0x09A;



volatile unsigned char EEADR @ 0x09B;



volatile unsigned char EECON1 @ 0x09C;

volatile bit RD @ ((unsigned)&EECON1*8)+0;
volatile bit WREN1 @ ((unsigned)&EECON1*8)+2;
volatile bit WRERR @ ((unsigned)&EECON1*8)+3;
volatile bit WREN2 @ ((unsigned)&EECON1*8)+4;
volatile bit WREN3 @ ((unsigned)&EECON1*8)+5;

volatile union {
struct {
unsigned RD : 1;
unsigned : 1;
unsigned WREN1 : 1;
unsigned WRERR : 1;
unsigned WREN2 : 1;
unsigned WREN3 : 1;
};
} EECON1bits @ 0x09C;



volatile unsigned char EECON2 @ 0x09D;

volatile bit WR @ ((unsigned)&EECON2*8)+0;

volatile union {
struct {
unsigned WR : 1;
};
} EECON2bits @ 0x09d;


volatile unsigned char SFR00 @0x000;
volatile unsigned char SFR01 @0x001;
volatile unsigned char SFR02 @0x002;
volatile unsigned char SFR03 @0x003;
volatile unsigned char SFR04 @0x004;
volatile unsigned char SFR05 @0x005;
volatile unsigned char SFR06 @0x006;
volatile unsigned char SFR07 @0x007;
volatile unsigned char SFR08 @0x008;
volatile unsigned char SFR09 @0x009;
volatile unsigned char SFR0A @0x00A;
volatile unsigned char SFR0B @0x00B;
volatile unsigned char SFR0C @0x00C;
volatile unsigned char SFR0D @0x00D;
volatile unsigned char SFR0E @0x00E;
volatile unsigned char SFR0F @0x00F;

volatile unsigned char SFR10 @0x010;
volatile unsigned char SFR11 @0x011;
volatile unsigned char SFR12 @0x012;
volatile unsigned char SFR13 @0x013;
volatile unsigned char SFR14 @0x014;
volatile unsigned char SFR15 @0x015;
volatile unsigned char SFR16 @0x016;
volatile unsigned char SFR17 @0x017;
volatile unsigned char SFR18 @0x018;
volatile unsigned char SFR19 @0x019;
volatile unsigned char SFR1A @0x01A;
volatile unsigned char SFR1B @0x01B;
volatile unsigned char SFR1C @0x01C;
volatile unsigned char SFR1D @0x01D;
volatile unsigned char SFR1E @0x01E;
volatile unsigned char SFR1F @0x01F;


volatile unsigned char SFR80 @0x080;
volatile unsigned char SFR81 @0x081;
volatile unsigned char SFR82 @0x082;
volatile unsigned char SFR83 @0x083;
volatile unsigned char SFR84 @0x084;
volatile unsigned char SFR85 @0x085;
volatile unsigned char SFR86 @0x086;
volatile unsigned char SFR87 @0x087;
volatile unsigned char SFR88 @0x088;
volatile unsigned char SFR89 @0x089;
volatile unsigned char SFR8A @0x08A;
volatile unsigned char SFR8B @0x08B;
volatile unsigned char SFR8C @0x08C;
volatile unsigned char SFR8D @0x08D;
volatile unsigned char SFR8E @0x08E;
volatile unsigned char SFR8F @0x08F;

volatile unsigned char SFR90 @0x090;
volatile unsigned char SFR91 @0x091;
volatile unsigned char SFR92 @0x092;
volatile unsigned char SFR93 @0x093;
volatile unsigned char SFR94 @0x094;
volatile unsigned char SFR95 @0x095;
volatile unsigned char SFR96 @0x096;
volatile unsigned char SFR97 @0x097;
volatile unsigned char SFR98 @0x098;
volatile unsigned char SFR99 @0x099;
volatile unsigned char SFR9A @0x09A;
volatile unsigned char SFR9B @0x09B;
volatile unsigned char SFR9C @0x09C;
volatile unsigned char SFR9D @0x09D;
volatile unsigned char SFR9E @0x09E;
volatile unsigned char SFR9F @0x09F;


# 27 "C:\Program Files (x86)\HI-TECH Software\PICC\9.83\include\SYSCFG.h"
#pragma inline(_nop)
extern void _nop(void);

# 80
extern unsigned int flash_read(unsigned short addr);

# 41 "C:\Program Files (x86)\HI-TECH Software\PICC\9.83\include\eeprom_routines.h"
extern unsigned char eeprom_write(unsigned char addr, unsigned char value);
extern unsigned char eeprom_read(unsigned char addr);
extern void eecpymem(volatile unsigned char *to, eeprom unsigned char *from, unsigned char size);
extern void memcpyee(eeprom unsigned char *to, const unsigned char *from, unsigned char size);


# 153 "C:\Program Files (x86)\HI-TECH Software\PICC\9.83\include\SYSCFG.h"
#pragma inline(_delay)
extern void _delay(unsigned long);

# 53 "i2c.c"
unsigned char RXFLAG = 0;
unsigned char ReadAPin;

# 61
void POWER_INITIAL (void)
{
OSCCON = 0X00|0X70|0X01;



INTCON = 0;
PORTA = 0B00000000;
TRISA = 0B11101011;
WPUA = 0B00000000;


OPTION = 0B00001000;

MSCKCON = 0B00000000;




}

# 87
void DelayUs(unsigned char Time)
{
unsigned char a;
for(a=0;a<Time;a++)
{
_nop();
}
}

# 101
void DelayMs(unsigned int Time)
{
unsigned int a,b;
for(a=0;a<Time;a++)
{
for(b=0;b<5;b++)
{
DelayUs(98);
}
}
}

# 118
void DelayS(unsigned char Time)
{
unsigned char a,b;
for(a=0;a<Time;a++)
{
for(b=0;b<10;b++)
{
DelayMs(100);
}
}
}

void DelayM(unsigned char Time)
{
unsigned char a;
for(a=0;a<Time;a++)
{
DelayS(60);
}
}

# 144
void IIC_Start(void)
{
TRISA2 =0;
RA2=1;
RA4=1;
DelayUs(10);
RA2=0;
DelayUs(10);
RA4=0;
DelayUs(10);
}

# 161
void IIC_Stop(void)
{
TRISA2 =0;
RA4=0;
RA2=0;
DelayUs(10);
RA4=1;
DelayUs(10);
RA2=1;
DelayUs(10);
}

# 179
unsigned char IIC_Wait_Ack(void)
{
unsigned char ucErrTime=0;
TRISA2 =1;
RA2=1;
DelayUs(5);
RA4=1;
DelayUs(5);
while(RA2)
{
ucErrTime++;
if(ucErrTime>250)
{
IIC_Stop();
return 1;
}
}
RA4=0;
return 0;
}

# 205
void IIC_Ack(void)
{
RA4=0;
TRISA2 =0;
RA2=0;
DelayUs(5);
RA4=1;
DelayUs(5);
RA4=0;
}

# 221
void IIC_NAck(void)
{
RA4=0;
TRISA2 =0;
RA2=1;
DelayUs(5);
RA4=1;
DelayUs(5);
RA4=0;
}

# 237
void IIC_Send_Byte(unsigned char txd)
{
unsigned char t;
TRISA2 =0;
RA4=0;
for(t=0;t<8;t++)
{
if((txd&0x80)>>7)
RA2=1;
else
RA2=0;
txd<<=1;
DelayUs(5);
RA4=1;
DelayUs(5);
RA4=0;
DelayUs(5);
}
}

# 262
unsigned char IIC_Read_Byte(void)
{
unsigned char i,receive=0;
TRISA2 =1;
for(i=0;i<8;i++ )
{
RA4=0;
DelayUs(5);
RA4=1;
receive<<=1;
if(RA2)receive++;
DelayUs(5);
}
IIC_NAck();

return receive;
}

# 285
unsigned char IIC_READ(unsigned char address)
{
unsigned char iicdata = 0;
IIC_READ_Begin:
IIC_Start();
IIC_Send_Byte(0xa0);
if(IIC_Wait_Ack())goto IIC_READ_Begin;
IIC_Send_Byte(address);
if(IIC_Wait_Ack())goto IIC_READ_Begin;
IIC_Start();
IIC_Send_Byte(0xa1);
if(IIC_Wait_Ack())goto IIC_READ_Begin;
iicdata=IIC_Read_Byte();
IIC_Stop();
return iicdata;
}

# 307
void IIC_WRITE(unsigned char address,unsigned char data)
{
IIC_WRITE_Begin:
IIC_Start();
IIC_Send_Byte(0xa0);
if(IIC_Wait_Ack())goto IIC_WRITE_Begin;

IIC_Send_Byte(address);
if(IIC_Wait_Ack())goto IIC_WRITE_Begin;

IIC_Send_Byte(data);
if(IIC_Wait_Ack())goto IIC_WRITE_Begin;

IIC_Stop();
}
unsigned char I2C_SendString(unsigned char chip_addr, unsigned char const *buffer,int Number)
{
unsigned char i;
IIC_Start();
IIC_Send_Byte(chip_addr);

if(IIC_Wait_Ack()==1){

return 0;
}

for(i=0; i<Number; i++) {
IIC_Send_Byte(*buffer);
if(IIC_Wait_Ack()==1) {

return 0;
}
buffer++;
}
IIC_Stop();
return 1;
}

# 351
void TIMER0_INITIAL (void)
{
OPTION = 0B00000000;




TMR0 = 49;
T0IF = 0;
}

# 367
void PA2_Level_Change_INITIAL(void)
{
TRISA2 =1;
ReadAPin = PORTA;
PAIF =0;
IOCA2 =1;
PAIE =1;

}
void uartInit() {
POWER_INITIAL();
TIMER0_INITIAL();
PA2_Level_Change_INITIAL();
GIE = 1;
T0IE = 1;
}

# 390
void interrupt ISR(void)
{


if(T0IE && T0IF)
{
TMR0 = 49;

T0IF = 0;
T0IE = 0;
}


if(PAIE && PAIF)
{
ReadAPin = PORTA;
PAIF = 0;
if(RA1 == 0)
{
PAIE = 0;
IOCA2 =0;
RXFLAG = 1;
}
}
}

# 421
void WaitTF0( void )
{
while(T0IE);
T0IE=1;
}

# 432
void WByte(unsigned char input) {

unsigned char i=8;
RA0 = 1;
TMR0 = 49;
T0IE = 1;
WaitTF0();
RA0=0;
WaitTF0();

while(i--)
{
if(input&0x01) {
RA0=1;
} else {
RA0 = 0;
}
WaitTF0();
input=input>>1;
}


RA0=(bit)1;
T0IE=0;
}
void WString(unsigned char const *buffer,int Number) {
unsigned char i;

TRISA0 = 0;
for(i=0; i<Number; i++) {
WByte(*buffer);
buffer++;
}
TRISA0 = 1;
}

# 473
unsigned char RByte() {
unsigned char Output=0;
unsigned char i=8;
T0IE=1;
TMR0 = 49;
WaitTF0();
T0IE=1;
TMR0 = 49;
WaitTF0();

while(i--)
{
Output >>=1;
if(RA1)
{
Output|=0x80;
}
WaitTF0();
}
T0IE=0;
return Output;
}
unsigned char const par1[] = {

0xB5,0x62,0x06,0x41,0x0C,0x00,0x00,0x00,0x03,0x1F,0x78,0xB7,0x58,0xB7,0xFF,0x76,0xCF,0xFF,0xF6,0x6B,
};
unsigned char const par2[] = {

0xB5,0x62,0x06,0x3E,0x3C,0x00,0x00,0x00,0x20,0x07,0x00,0x08,0x10,0x00,
0x01,0x00,0x01,0x01,0x01,0x01,0x03,0x00,0x00,0x00,0x01,0x01,0x02,0x04,
0x08,0x00,0x00,0x00,0x01,0x01,0x03,0x08,0x10,0x00,0x00,0x00,0x01,0x01,
0x04,0x00,0x08,0x00,0x00,0x00,0x01,0x01,0x05,0x00,0x03,0x00,0x01,0x00,
0x01,0x01,0x06,0x08,0x0E,0x00,0x01,0x00,0x01,0x01,0x2E,0x5D,
};
unsigned char const par3[] = {

0xB5,0x62,0x06,0x23,0x28,0x00,0x02,0x00,0x4C,0x66,0x40,0x00,0x00,0x00,0x00,0x00,
0x03,0x20,0x06,0x00,0x00,0x00,0x00,0x00,0x4B,0x07,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x01,0x00,0x00,0x2C,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xEE,0x44,
};
unsigned char const par4[] = {

0xB5,0x62,0x06,0x24,0x24,0x00,0xFF,0xFF,0x08,0x03,0x00,0x00,0x00,0x00,0x10,0x27,
0x00,0x00,0x05,0x00,0xFA,0x00,0xFA,0x00,0x64,0x00,0x5E,0x01,0x64,0x3C,0x04,0x1C,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0A,0x28,
};
unsigned char const par5[] = {

0xB5,0x62,0x06,0x00,0x14,0x00,0x01,0x00,0x00,0x00,0xD0,0x08,0x00,0x00,
0x00,0xC2,0x01,0x00,0x07,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0xC0,0x7E,
};
unsigned char const par6[] = {

0xB5,0x62,0x06,0x08,0x06,0x00,0x3C,0x00,0x01,0x00,0x01,0x00,0x52,0x22,
};
unsigned char const par7[] = {

0xB5,0x62,0x06,0x01,0x08,0x00,0x01,0x30,0x00,0x01,0x00,0x00,0x00,0x00,0x41,0x00,
};
unsigned char const par8[] = {

0xB5,0x62,0x06,0x01,0x08,0x00,0x01,0x01,0x00,0x01,0x00,0x00,0x00,0x00,0x12,0xB7,
};
unsigned char const par9[] = {

0xB5,0x62,0x06,0x01,0x08,0x00,0x01,0x02,0x00,0x01,0x00,0x00,0x00,0x00,0x13,0xBE,
};
unsigned char const par10[] = {

0xB5,0x62,0x06,0x01,0x08,0x00,0x01,0x07,0x00,0x01,0x00,0x00,0x00,0x00,0x18,0xE1,
};
unsigned char const par11[] = {

0xB5,0x62,0x06,0x01,0x08,0x00,0x01,0x12,0x00,0x01,0x00,0x00,0x00,0x00,0x23,0x2E,
};
unsigned char const par12[] = {

0xB5,0x62,0x06,0x01,0x08,0x00,0x09,0x14,0x01,0x00,0x00,0x00,0x00,0x00,0x2D,0x7D,
};
unsigned char const par13[] = {


0xB5,0x62,0x09,0x14,0x04,0x00,0x00,0x00,0x00,0x00,0x21,0xEC,
};
void main()
{
char i;
POWER_INITIAL();
DelayS(1);
DelayMs(500);
I2C_SendString(0x84,par1,sizeof(par1));
DelayMs(100);
I2C_SendString(0x84,par2,sizeof(par2));
DelayMs(100);
I2C_SendString(0x84,par3,sizeof(par3));
DelayMs(100);
I2C_SendString(0x84,par4,sizeof(par4));
DelayMs(100);
I2C_SendString(0x84,par5,sizeof(par5));
DelayMs(100);
I2C_SendString(0x84,par6,sizeof(par6));
DelayMs(100);
I2C_SendString(0x84,par7,sizeof(par7));
DelayMs(100);
I2C_SendString(0x84,par8,sizeof(par8));
DelayMs(100);
I2C_SendString(0x84,par9,sizeof(par9));
DelayMs(100);
I2C_SendString(0x84,par10,sizeof(par10));
DelayMs(100);
I2C_SendString(0x84,par11,sizeof(par11));
DelayMs(100);
I2C_SendString(0x84,par12,sizeof(par12));
DelayMs(100);



DelayS(50);
for(i = 0;i < 10;i++) {
I2C_SendString(0x84,par13,sizeof(par13));
DelayS(30);
}
while(1){
I2C_SendString(0x84,par13,sizeof(par13));
DelayM(5);
}

TRISA2 =1;
TRISA4 =1;
while(1)
{
_nop();

}
}

